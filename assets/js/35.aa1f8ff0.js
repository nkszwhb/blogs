(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{557:function(t,s,e){"use strict";e.r(s);var a=e(9),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("[官方文档] "),e("a",{attrs:{href:"https://git-scm.com/docs/git-reset",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/docs/git-reset"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("[git 教程] "),e("a",{attrs:{href:"https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset")]),t._v(" "),e("p",[e("code",[t._v("git reset")]),t._v("命令用于将当前分支指向另一个位置。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当期分支的指针倒退三个 commit，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 并且会改变暂存区")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD~3\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 倒退指针的同时，不改变暂存区")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~3\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 倒退指针的同时，改变工作区")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~3\n")])])]),e("p",[t._v("如果不指定回滚的位置，那么等同于撤销修改。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销上一次向暂存区添加的所有文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 无任何效果")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同时撤销暂存区和工作区的修改，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回复到上一次提交的状态")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销上一次向暂存区添加的某个指定文件，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不影响工作区中的该文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset -- "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h3",{attrs:{id:"参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),e("ul",[e("li",[t._v("soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit。")]),t._v(" "),e("li",[t._v("mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销"),e("code",[t._v("git add")]),t._v("。")]),t._v(" "),e("li",[t._v("hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。"),e("code",[t._v("git reset --hard")]),t._v("等同于"),e("code",[t._v("git reset --hard HEAD")]),t._v("。")]),t._v(" "),e("li",[e("code",[t._v("-p")]),t._v("表示键入交互模式，指定暂存区的哪些部分需要撤销。")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Undo add")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Undo a commit，不重置工作区和缓存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回到 HEAD 之前的那个 commit")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD^\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Undo a commit，重置工作区和缓存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连续撤销三个 commit：HEAD, HEAD^, and HEAD~2")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD~3\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从暂存区移除指定文件，但不改变工作区中的该文件")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset -- frotz.c\n")])])]),e("h2",{attrs:{id:"reset-soft"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reset-soft"}},[t._v("#")]),t._v(" "),e("strong",[t._v("reset --soft")])]),t._v(" "),e("h3",{attrs:{id:"描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),e("blockquote",[e("p",[t._v('完全不碰索引文件或工作树（但将头部重置为<commit>，就像所有模式一样）。这使得你所有的修改文件都是 "待提交的修改"，就像 "git status" 所说的那样。')])]),t._v(" "),e("p",[t._v("回退你已提交的 commit，并将 commit 的修改内容放回到暂存区。")]),t._v(" "),e("p",[t._v("一般我们在使用 reset 命令时，"),e("code",[t._v("git reset --hard")]),t._v(" 会被提及的比较多，它能让 commit 记录强制回溯到某一个节点。而 "),e("code",[t._v("git reset --soft")]),t._v(" 的作用正如其名，"),e("code",[t._v("--soft")]),t._v(" (柔软的) 除了回溯节点外，还会保留节点的修改内容。")]),t._v(" "),e("h3",{attrs:{id:"应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),e("p",[t._v("回溯节点，为什么要保留修改内容？")]),t._v(" "),e("p",[t._v("应用场景1：有时候手滑不小心把不该提交的内容 commit 了，这时想改回来，只能再 commit 一次，又多一条“黑历史”。")]),t._v(" "),e("p",[t._v("应用场景2：规范些的团队，一般对于 commit 的内容要求职责明确，颗粒度要细，便于后续出现问题排查。本来属于两块不同功能的修改，一起 commit 上去，这种就属于不规范。这次恰好又手滑了，一次性 commit 上去。")]),t._v(" "),e("h3",{attrs:{id:"命令使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令使用"}},[t._v("#")]),t._v(" 命令使用")]),t._v(" "),e("p",[t._v("学会 "),e("code",[t._v("reset --soft")]),t._v(" 之后，你只需要：")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 恢复最近一次 commit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD^\n\n")])])]),e("p",[e("code",[t._v("reset --soft")]),t._v(" 相当于后悔药，给你重新改过的机会。对于上面的场景，就可以再次修改重新提交，保持干净的 commit 记录。")]),t._v(" "),e("p",[t._v("以上说的是还未 push 的commit。对于已经 push 的 commit，也可以使用该命令，不过再次 push 时，由于远程分支和本地分支有差异，需要强制推送 "),e("code",[t._v("git push -f")]),t._v(" 来覆盖被 reset 的 commit。")]),t._v(" "),e("p",[t._v("还有一点需要注意，在 "),e("code",[t._v("reset --soft")]),t._v(" 指定 commit 号时，会将该 commit 到最近一次 commit 的所有修改内容全部恢复，而不是只针对该 commit。")]),t._v(" "),e("p",[t._v("举个栗子：")]),t._v(" "),e("p",[t._v("commit 记录有 c、b、a。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a383895e27dc42e780420036a6781426~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),e("p",[t._v("reset 到 a。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft 1a900ac29eba73ce817bf959f82ffcb0bfa38f75\n")])])]),e("p",[t._v("此时的 HEAD 到了 a，而 b、c 的修改内容都回到了暂存区。")])])}),[],!1,null,null,null);s.default=r.exports}}]);