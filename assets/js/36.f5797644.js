(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{560:function(t,e,r){"use strict";r.r(e);var a=r(9),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"revert"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#revert"}},[t._v("#")]),t._v(" revert")]),t._v(" "),r("p",[t._v("【官方文档】"),r("a",{attrs:{href:"https://git-scm.com/docs/git-revert",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://git-scm.com/docs/git-revert"),r("OutboundLink")],1)]),t._v(" "),r("h3",{attrs:{id:"描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),r("blockquote",[r("p",[t._v("给出一个或多个现有的提交，恢复相关补丁所带来的变化，并记录一些新的提交，记录这些变化。这需要您的工作树是干净的（没有对 HEAD 提交的修改）。")])]),t._v(" "),r("p",[t._v("将现有的提交还原，恢复提交的内容，并生成一条还原记录。")]),t._v(" "),r("h3",{attrs:{id:"应用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),r("p",[t._v("应用场景：有一天测试突然跟你说，你开发上线的功能有问题，需要马上撤回，否则会影响到系统使用。这时可能会想到用 reset 回退，可是你看了看分支上最新的提交还有其他同事的代码，用 reset 会把这部分代码也撤回了。由于情况紧急，又想不到好方法，还是任性的使用 reset，然后再让同事把他的代码合一遍。")]),t._v(" "),r("h3",{attrs:{id:"命令使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#命令使用"}},[t._v("#")]),t._v(" 命令使用")]),t._v(" "),r("h4",{attrs:{id:"revert-普通提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#revert-普通提交"}},[t._v("#")]),t._v(" revert 普通提交")]),t._v(" "),r("p",[t._v("学会 revert 之后，立马就可以拯救这种尴尬的情况。")]),t._v(" "),r("p",[t._v("现在 master 记录如下：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c25ca458d9434f0f88cd90fd88032045~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert 21dcd937fe555f58841b17466a99118deb489212\n")])])]),r("p",[t._v("revert 掉自己提交的 commit。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0344e29aeb9d4250bdec44a52655224d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("因为 revert 会生成一条新的提交记录，这时会让你编辑提交信息，编辑完后 :wq 保存退出就好了。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceaf7e389fd34136a6257c4d0d9f89b3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("再来看下最新的 log，生成了一条 revert 记录，虽然自己之前的提交记录还是会保留着，但你修改的代码内容已经被撤回了。")]),t._v(" "),r("h4",{attrs:{id:"revert-合并提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#revert-合并提交"}},[t._v("#")]),t._v(" revert 合并提交")]),t._v(" "),r("p",[t._v("在 git 的 commit 记录里，还有一种类型是合并提交，想要 revert 合并提交，使用上会有些不一样。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/925ce20f206a4656b85e772f32ce2012~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("现在的 master 分支里多了条合并提交。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5199013b283c4c7992b407c0eb1d3815~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("使用刚刚同样的 revert 方法，会发现命令行报错了。")]),t._v(" "),r("p",[t._v("为什么会这样？在官方文档中有解释。")]),t._v(" "),r("blockquote",[r("p",[t._v("通常无法 revert 合并，因为您不知道合并的哪一侧应被视为主线。此选项指定主线的父编号（从1开始），并允许 revert 反转相对于指定父编号的更改")])]),t._v(" "),r("p",[t._v("我的理解是因为合并提交是两条分支的交集节点，而 git 不知道需要撤销的哪一条分支，需要添加参数 -m 指定主线分支，保留主线分支的代码，另一条则被撤销。")]),t._v(" "),r("p",[t._v('-m 后面要跟一个 parent number 标识出"主线"，一般使用 1 保留主分支代码。')]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert -m "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitHash"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),r("h4",{attrs:{id:"revert-合并提交后-再次合并分支会失效"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#revert-合并提交后-再次合并分支会失效"}},[t._v("#")]),t._v(" revert 合并提交后，再次合并分支会失效")]),t._v(" "),r("p",[t._v("还是上面的场景，在 master 分支 revert 合并提交后，然后切到 feature 分支修复好 bug，再合并到 master 分支时，会发现之前被 revert 的修改内容没有重新合并进来。")]),t._v(" "),r("p",[t._v("因为使用 revert 后， feature 分支的 commit 还是会保留在 master 分支的记录中，当你再次合并进去时，git 判断有相同的 commitHash，就忽略了相关 commit 修改的内容。")]),t._v(" "),r("p",[t._v("这时就需要 revert 掉之前 revert 的合并提交，有点拗口，接下来看操作吧。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd039172e78c4543aeaced451f2fe666~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("现在 master 的记录是这样的。")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/420dc885841c41bb8102fda39fce7853~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}})]),t._v(" "),r("p",[t._v("再次使用 revert，之前被 revert 的修改内容就又回来了。")])])}),[],!1,null,null,null);e.default=s.exports}}]);