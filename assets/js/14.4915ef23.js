(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{542:function(t,a,e){"use strict";e.r(a);var s=e(9),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("https://www.bookstack.cn/read/git-tutorial/docs-basic.md")])]),t._v(" "),e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),e("p",[t._v("git是一种源码管理系统（source code management，缩写为SCM）。它对当前文件提供版本管理功能，核心思想是对当前文件建立一个对象数据库（object database），将历史版本信息存放在这个数据库中。")]),t._v(" "),e("h2",{attrs:{id:"git操作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git操作流程"}},[t._v("#")]),t._v(" git操作流程")]),t._v(" "),e("ul",[e("li",[t._v("安装git")]),t._v(" "),e("li",[t._v("提交用户名和电子邮件")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Some One"')]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"someone@gmail.com"')]),t._v("\n")])])]),e("ol",[e("li",[t._v("git init：新建一个git库")]),t._v(" "),e("li",[t._v("git status：查看目前状态")]),t._v(" "),e("li",[t._v("git add <文件名>：添加文件从工作区到暂存区")]),t._v(" "),e("li",[t._v("git commit -m “提示信息”：从暂存区提交到代码仓库")]),t._v(" "),e("li",[t._v("git log：查看提交commit的信息")]),t._v(" "),e("li",[t._v("git remote add origin https://github.com/try-git/try_git.git : 添加远程指针")]),t._v(" "),e("li",[t._v("git push -u origin master：将本地的master分支推送到远程origin主机，-u参数表示记住对应关系，下次可以直接git push推送。")]),t._v(" "),e("li",[t._v("git pull origin master：将远程主机origin的代码取回本地，与本地的master分支合并")]),t._v(" "),e("li",[t._v("git diff HEAD：查看与上一次commit的区别")])]),t._v(" "),e("h3",{attrs:{id:"发布一个版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布一个版本"}},[t._v("#")]),t._v(" 发布一个版本")]),t._v(" "),e("p",[t._v("为当前分支打上版本号。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("VERSION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"released [VERSION]"')]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("VERSION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),e("h2",{attrs:{id:"git对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git对象"}},[t._v("#")]),t._v(" git对象")]),t._v(" "),e("p",[t._v("对象数据库包含四类对象。")]),t._v(" "),e("ul",[e("li",[t._v("Blob：包含二进制数据，它们是文件内容。只要文件内容改变，就会在对象数据库中生成一个blob对象。注意，blob对象只保存文件内容，不含文件名和文件存储位置等信息。如果文件名改变，或者文件储存位置改变，不会生成新的blob对象。")]),t._v(" "),e("li",[t._v("Tree：blob对象的集合，以及它们的文件名和权限。一个tree对象描述一个时点上的一个目录。")]),t._v(" "),e("li",[t._v("Commit：描述一个时点上的项目状态，包含一条log信息，一个tree对象和指向父节点（parent commits）的指针。第一个commit对象没有父节点。\n"),e("ul",[e("li",[t._v("紀錄 root tree SHA1")]),t._v(" "),e("li",[t._v("紀錄 parent commit SHA1")]),t._v(" "),e("li",[t._v("紀錄作者、時間和 commit message 資訊")])])]),t._v(" "),e("li",[t._v("tag")])]),t._v(" "),e("p",[t._v("对象数据库依赖SHA哈希函数。当一个对象加入数据库，它会被SHA函数处理，得到的结果就是该对象在数据库中的名字（前两个字节被当作目录名，用来提高效率）。")]),t._v(" "),e("p",[t._v("git命令基本上是图数据库操作命令，用来删除/操作节点、移动指针等等。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hello "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" hello.txt\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ tree .git\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 存在 .git/objects/ce/013625030ba8dba906f756967f9e9ca394464a")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 這是 hello 內容的 SHA1")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blob 6'),e("span",{pre:!0,attrs:{class:"token entity",title:"\\x00"}},[t._v("\\x00")]),t._v("hello"),e("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" shasum\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" hash-object --stdin\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file -p ce0136\n")])])]),e("p",[t._v("上面代码有几点需要注意。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git add")]),t._v("命令就会生成二进制对象。")]),t._v(" "),e("li",[t._v("shasum命令返回字符串的SHA哈希函数结果。")]),t._v(" "),e("li",[e("code",[t._v("git hash-object")]),t._v("命令计算一个文件的git对象ID，stdin参数表示从标准输入读取，而不是从本地文件读取。")]),t._v(" "),e("li",[e("code",[t._v("git cat-file")]),t._v("命令显示git对象文件的内容和大小信息，p参数表示以易于阅读的格式显示。")])]),t._v(" "),e("p",[t._v("树对象保存当前目录的快照。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74 data\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100664")]),t._v(" blob 5e40c0877058c504203932e5136051cf3cd3519b letter.txt\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100664")]),t._v(" blob 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 number.txt\n")])])]),e("p",[t._v("commit（快照）对象也保存在"),e("code",[t._v(".git/objects")]),t._v("目录。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("tree ffe298c3ce8bb07326f888907996eaa48d266db4\nauthor Mary Rose Cook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mary@maryrosecook.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1424798436")]),t._v(" -0500\ncommitter Mary Rose Cook "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("mary@maryrosecook.com"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1424798436")]),t._v(" -0500\na1\n")])])]),e("h3",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),e("p",[t._v("指定全局的.gitignore文件。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global core.excludesfile"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("/Users/flores/.gitignore\n")])])]),e("h2",{attrs:{id:"目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[t._v("#")]),t._v(" 目录结构")]),t._v(" "),e("ul",[e("li",[t._v(".git/refs/heads：保存各个分支的指针")]),t._v(" "),e("li",[t._v(".git/HEAD 文件，保存HEAD指针")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("ref: refs/heads/master\n")])])]),e("p",[t._v("上面代码说明HEAD指向"),e("code",[t._v(".git/refs/heads/master")]),t._v("文件，该文件是一个Hash值。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("a87cc0f39d12e51be8d68eab5cef1d31e8807a1c\n")])])]),e("ul",[e("li",[t._v(".git/refs/tags：保存tag指针")])]),t._v(" "),e("h3",{attrs:{id:"缓冲区域-index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区域-index"}},[t._v("#")]),t._v(" 缓冲区域（index）")]),t._v(" "),e("p",[t._v("Index区域（.git/index）是一个二进制文件，用来保存当前目录在某个时点的状态。")]),t._v(" "),e("p",[e("code",[t._v("git init")]),t._v("命令用来创建index区域，以及对象数据库（.dircache/objects）。")]),t._v(" "),e("p",[t._v("100644 為檔案模式,表示這是一個普通檔案；100755 表示可執行檔,120000 表示 symbolic link。")]),t._v(" "),e("p",[e("code",[t._v(".git/index")]),t._v("文件，保存暂存区的文件名和对应的Hash值，每行对应一个文件。下面是一个例子。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("data/letter.txt 5e40c0877058c504203932e5136051cf3cd3519b\ndata/number.txt 274c0052dd5408f8ae2bc8440029ff67d79bc5c3\n")])])]),e("h2",{attrs:{id:"git-commit的全过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit的全过程"}},[t._v("#")]),t._v(" Git commit的全过程")]),t._v(" "),e("ol",[e("li",[t._v("用內容產生 blob object")]),t._v(" "),e("li",[t._v("寫入 file mode, blob SHA1, file name 到 staging area")]),t._v(" "),e("li",[t._v("根據 staging area 產生 Tree object")]),t._v(" "),e("li",[t._v("用 root tree SHA1 和 parent commit SHA1 產生\ncommit object")]),t._v(" "),e("li",[t._v("用 commit SHA1 更新 master 參考")])]),t._v(" "),e("p",[t._v("如何不用 "),e("code",[t._v("git add")]),t._v(" 和 "),e("code",[t._v("git commit")]),t._v("指令完成 commit 動作?")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git add的部分")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hola"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" hash-object -w --stdin\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-index --add --cacheinfo "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" 5c1b14949828006ed75a3e8858957f86a2f7e2eb hola.txt\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git commit的部分")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" write-tree\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit-tree 27b9d5 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second commit"')]),t._v(" -p 30b060\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" update-ref refs/heads/master 97b806c9e5561a08e0df1f1a60857baad3a1f02e\n")])])]),e("h2",{attrs:{id:"父节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父节点"}},[t._v("#")]),t._v(" 父节点")]),t._v(" "),e("p",[t._v("合并产生的新节点，会有两个父节点。第一个是当前所在分支的父节点，第二个合并进来的那个分支的父节点。")]),t._v(" "),e("h2",{attrs:{id:"tag对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag对象"}},[t._v("#")]),t._v(" Tag对象")]),t._v(" "),e("p",[t._v("Tag 分兩種:annotated tag 才會產生 object。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag -a release\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rev-parse release\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cat-file -p 2450f3\n")])])]),e("p",[t._v("tag对象的内容。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("object 309be0\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("type")]),t._v(" commit\ntag release\ntagger ihower "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1375383070")]),t._v(" +0800\nRelease"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n")])])]),e("h2",{attrs:{id:"reference-指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference-指针"}},[t._v("#")]),t._v(" Reference（指针）")]),t._v(" "),e("p",[t._v("所谓指针（reference），只是一个链接，用来指向其他物体，方便引用。Git有三种指针，但是所有指针归根结底都是指向某个commit。")]),t._v(" "),e("ul",[e("li",[t._v("Tag指针：指向某个commit，或者指向某个tag对象。保存位置在.git/refs/tags/目录，文件名为tag名，内容为某个commit或ref object的SHA1哈希。")]),t._v(" "),e("li",[t._v("Branch指针：指向某个commit。每次该分支有新的commit，指针就会变动。")]),t._v(" "),e("li",[t._v("HEAD指针：指向目前所在的Branch，用来区分目前在哪个分支。比如，内容为ref: refs/heads/\nmaster。")])]),t._v(" "),e("h2",{attrs:{id:"团队开发模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#团队开发模式"}},[t._v("#")]),t._v(" 团队开发模式")]),t._v(" "),e("p",[t._v("集中式工作流程：團隊內部私有專案，大家都有權限 Push 到共用的 Repository")]),t._v(" "),e("p",[t._v("管理員工作流程：適合一般 Open Source 專案,只有少部分人有權限可以 Push到 Repository,其他開發者用用 request pull 請求合併。例如 GitHub 提供的 Fork 和 Pull Request 功能。")]),t._v(" "),e("h2",{attrs:{id:"分支管理策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),e("h3",{attrs:{id:"github-flow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-flow"}},[t._v("#")]),t._v(" github flow")]),t._v(" "),e("ul",[e("li",[t._v("master 是 stable/production 可佈署的版本")]),t._v(" "),e("li",[t._v("任何開發從 master branch 分支出 feature branch")]),t._v(" "),e("li",[t._v("送 pull request 開始進行行討論、code review和測試")]),t._v(" "),e("li",[t._v("最後合併回 master 代表可以佈署了")])]),t._v(" "),e("p",[t._v("pros and cons")]),t._v(" "),e("ul",[e("li",[t._v("簡單、清楚、容易了解")]),t._v(" "),e("li",[t._v("搭配 Github 的 Pull Request 介面")]),t._v(" "),e("li",[t._v("沒有 release branch,東⻄一進 master 就上 production")])]),t._v(" "),e("h3",{attrs:{id:"ruby-on-rails"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ruby-on-rails"}},[t._v("#")]),t._v(" Ruby on Rails")]),t._v(" "),e("ul",[e("li",[t._v("master 是開發版本")]),t._v(" "),e("li",[t._v("feature branches 審核完後,合併進 master")]),t._v(" "),e("li",[t._v("maintenance branches,用 cherry-pick 做 backporting")]),t._v(" "),e("li",[t._v("基本上就是 Github flow 加上 maintenance branches 維護舊版的設計")]),t._v(" "),e("li",[t._v("版本號(Tag)打在 master 上,透過 preview 和 beta 的版本號提前釋出")])]),t._v(" "),e("h3",{attrs:{id:"cmake"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cmake"}},[t._v("#")]),t._v(" CMake")]),t._v(" "),e("ul",[e("li",[t._v("master 預備釋出的版本,feature branches 從這裡分支出去")]),t._v(" "),e("li",[t._v("feature branch 完成後,合併進 next")]),t._v(" "),e("li",[t._v("next 整合版本,完成的 feature branch 先合併到這裡進行測試\n"),e("ul",[e("li",[t._v("在 next 測好的 feature branch,才合併進 master")]),t._v(" "),e("li",[t._v("可以將 master 合併進 next,減少之後的 code conflicts")]),t._v(" "),e("li",[t._v("不會將 next 合併進 master")])])]),t._v(" "),e("li",[t._v("nightly 每天 1:00 UTC 自動從 next branch 分支支出來跑自動測試")])]),t._v(" "),e("h2",{attrs:{id:"git远程操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git远程操作"}},[t._v("#")]),t._v(" Git远程操作")]),t._v(" "),e("p",[t._v("Git的repo一般是用来指本地库，远程库（remote）主要用来存档、合作、分享和触发持续集成。")]),t._v(" "),e("h2",{attrs:{id:"参考链接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),e("ul",[e("li",[t._v("corbet, "),e("a",{attrs:{href:"https://lwn.net/Articles/131657/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The guts of git"),e("OutboundLink")],1),t._v(": 最早的一篇介绍Git的文章，可以了解Git的总体设计思路")]),t._v(" "),e("li",[t._v("张文钿, "),e("a",{attrs:{href:"http://ihower.tw/blog/archives/7938",target:"_blank",rel:"noopener noreferrer"}},[t._v("git从微观到宏观"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);